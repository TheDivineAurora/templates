#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
// using namespace __gnu_pbds;
 
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// A.order_of_key() *A.find_by_order()
#define endl "\n"
#define int long long
#define ld long double
#define pb push_back
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int MAX_A = 2e6;
const int N = 2e5;
const int LN = 20;

vector<vector<int>> productOfMatrices(vector<vector<int>>A, vector<vector<int>>B){
    vector<vector<int>> res(A.size(), vector<int>(B[0].size(), 0));
    for(int i = 0; i < A.size(); ++i){
        for(int j = 0; j < B[0].size(); ++j){
            for(int k = 0; k < B.size(); ++k){
                res[i][j] = (res[i][j] +  A[i][k] * B[k][j]) % MOD;
            }
        }
    }

    return res;
}

vector<vector<int>> matrixExpo(vector<vector<int>>A, int b){
    if(b == 0) {
        vector<vector<int>> U(A.size(), vector<int>(A[0].size(), 0));
        for(int i = 0; i < A.size(); ++i){
            U[i][i] = 1;
        }

        return U;
    }

    if(b & 1) return productOfMatrices(A, matrixExpo(A, b - 1));

    return matrixExpo(productOfMatrices(A, A), b/2);
}
void solve(){   
    
}


int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    // cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
