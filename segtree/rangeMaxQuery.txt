class RangeMaxQuery {
private:
    vector<int> tree;
    int n;
    void build(vector<int>& a) {
        for (int i = 0; i < n; ++i) {
            if (i < a.size()) tree[i + n] = a[i];
            else tree[i + n] = -INF;
        }
        for (int i = n - 1; i > 0; --i) {
            tree[i] = max(tree[2 * i] , tree[2 * i + 1]);
        }
    }
    int query(int node, int nl, int nh, int ql, int qh) {
        if (ql > nh || qh < nl) return -INF;
        if (ql <= nl && nh <= qh) {
            return tree[node];
        }
        int mid = (nl + nh) / 2;
        return max(query(2 * node, nl, mid, ql, qh), query(2 * node + 1, mid + 1, nh, ql, qh));
    }
    void upd(int node, int nl, int nh, int ql, int qh, int val) {
        if (ql > nh || qh < nl) return;
        if (ql <= nl && nh <= qh) {
            tree[node] = val;
            return;
        }
        int mid = (nl + nh) / 2;
        upd(2 * node, nl, mid, ql, qh, val); upd(2 * node + 1, mid + 1, nh, ql, qh, val);
        tree[node] = max(tree[2*node], tree[2*node + 1]);
    }
public:
    RangeMaxQuery(vector<int>& a) {
        n = a.size();
        while (__builtin_popcount(n) != 1) {
            n++;
        }
        tree.resize(2 * n);
        build(a);
    }
    int query(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }
    void update(int l, int r, int val){
        upd(1, 0, n - 1, l, r, val);
    }
};