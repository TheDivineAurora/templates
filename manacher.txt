#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
using namespace __gnu_pbds;
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
//A.order_of_key() *A.find_by_order()
#define int long long
#define ld long double
#define pb push_back
#define rep(i,a,b) for(int i = a; i < b; i++)
#define sz(v) v.size()
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define ret(v) cout<<v<<"\n"; return
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 2e5;
const int LN = 20;
const int OPS = 700;

struct manacher{
  vector<int> p;

  void run_manacher(string s){
    int n = s.length();
    p.assign(n,1);
    int l = 1, r = 1;
    for(int i = 1; i<n; ++i){
      p[i] = max(0ll,min(r - i, p[l + r - i]));

      while(i + p[i] < n && i - p[i] >= 0 && s[i + p[i]] == s[i - p[i]]){
        p[i]++;
      }

      if(i + p[i] > r){
        r = i + p[i];
        l = i - p[i];
      }
    }
  }

  void build(string s){
    string t;
    for(auto c : s){
      t += string("#") + c;
    }
    
    run_manacher(t + "#");
  }

  int getLongest(int cen,bool odd){
    int pos = 2*cen + 1 + odd;
    return p[pos] - 1;
  }

  bool checkP(int l,int r){
    int len = r - l + 1;
    int cen = (l + r)/2;
    if(getLongest(cen, !(len % 2)) >= len) return true;
    return false;
  }
}m;

void solve(){
  string s;
  cin >> s;
  m.build(s);


}
 

int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    // cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
 
 
