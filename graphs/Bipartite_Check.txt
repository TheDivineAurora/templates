#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
using namespace __gnu_pbds;
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// A.order_of_key() *A.find_by_order()
#define endl "\n"
#define int long long
#define ld long double
#define pb push_back
#define rep(i,a,b) for(int i = a; i < b; i++)
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define ret(v) cout<<v<<"\n"; return
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 1e5;
const int LN = 20;


void solve(){
    int n, m;
    cin >> n >> m;
    vi adj[n + 1];
    for(int i = 1 ; i <= m; ++i){
      int x, y;
      cin >> x >> y;
      adj[x].pb(y);
      adj[y].pb(x);
    }
     
    vi color(n + 1,0);
     
    auto is_Bipartite = [&](){
        for(int i = 1; i <= n; ++i){

          if(color[i] == 0){

            queue<int> q;

            color[i] = 1;
            q.push(i);

            while(!q.empty()){
              int node = q.front();
              q.pop();

              for(auto v: adj[node]){
                if(color[v] == 0){
                   color[v] = -1 * color[node];
                   q.push(v);
                }
                else if(color[v] == color[node]){
                   return false;
                }
              }
             }
          }
        }
        return true;    
    };
    
}   
 
int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
 
