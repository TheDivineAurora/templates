#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
using namespace __gnu_pbds;
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// A.order_of_key() *A.find_by_order()
#define endl "\n"
#define int long long
#define ld long double
#define pb push_back
#define rep(i,a,b) for(int i = a; i < b; i++)
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define ret(v) cout<<v<<"\n"; return
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 2e5;
const int LN = 8192;
 
struct DSU {
    int n;
    vi wt, par;
 
    DSU(int x){
        n = x;
        wt.assign(n, 1);
        par.resize(n);
 
        for(int i = 0; i < n; ++i){
            par[i] = i;
        }    
    }
 
    int find(int v){
        if(par[v] == v) return v;
        return par[v] = find(par[v]);
    }
 
    void merge(int u, int v){
        u = find(u); v = find(v);
        if(u == v) return;
 
        if(wt[u] < wt[v]) swap(u, v);
 
        par[v] = u;
        wt[u] += wt[v];
    }
};
 
// follows 0 base indexing - careful
 
void solve(){
    int n, m;
    cin >> n >> m;
    DSU dsu(n + 1);
 
    for(int i = 0; i < m; ++i){
        int u, v;
        cin >> u >> v;
        dsu.merge(u, v);
    }
 
 
 
}   
 
int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    // cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
