#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
using namespace __gnu_pbds;
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// A.order_of_key() *A.find_by_order()
#define endl "\n"
#define int long long
#define ld long double
#define pb push_back
#define rep(i,a,b) for(int i = a; i < b; i++)
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define ret(v) cout<<v<<"\n"; return
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 2e5;
const int LN = 8192;


int n, m;
vi adj[200005];
int d[200005];
int p[200005];

int djikistra(int s, int e){
    for(int i = 0; i <= n; ++i){
        d[i] = 1e15;
        p[i] = -1;
    }

    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({0, s});
    d[s] = 0;

    while(!pq.empty()){
        int val = pq.top().first;
        int u = pq.top().second;

        pq.pop();

        if(d[u] != val) continue;

        for(auto v : adj[u]){
            if(d[v] > 1 + d[u]){
                d[v] = 1 + d[u];
                p[v] = u;
                pq.push({d[v], v});
            }
        }
    }

    return d[e];
}

void solve(){
    cin >> n >> m;
    for(int i = 0; i < m; ++i){
        int u, v;
        cin >> u >> v;

        adj[u].pb(v);
        adj[v].pb(u);
    }

}   
 
int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    // cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
 