#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
using namespace __gnu_pbds;
 
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// A.order_of_key() *A.find_by_order()
#define endl "\n"
#define int long long
#define ld long double
#define pb push_back
#define rep(i,a,b) for(int i = a; i < b; i++)
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define ret(v) cout<<v<<"\n"; return
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 2e5;
const int LN = 8192;
 
 
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
int n, m;
 
char a[1005][1005];
int d[1005][1005];
char p[1005][1005];
 
void shortest_path(int sx,int sy){
        priority_queue<pair<int,pii>, vector<pair<int,pii>>, greater<pair<int,pii>>> pq;
 
        for(int i = 0; i < n; ++i){
            for(int j = 0; j < m; ++j){
                d[i][j] = INF;
                p[i][j] = '#';
            }
        }
        d[sx][sy] = 0;
        pq.push({0, {sx, sy}});
 
        while(!pq.empty()){
            int x = pq.top().second.first;
            int y = pq.top().second.second;
            int val = pq.top().first;
 
            pq.pop();
            
            if(d[x][y] != val) continue;
 
            for(int k = 0; k < 4; ++k){
 
                int i = x + dx[k], j = y + dy[k];
 
                if(i < 0 || j < 0 || i >= n || j >= m || a[i][j] == '#') continue;
 
                if(d[i][j] > 1 + d[x][y]){
                    d[i][j] = 1 + d[x][y];
                    pq.push({d[i][j], {i, j}});
                }
 
            }
        }
 
};
 
 
void solve(){
    cin >> n >> m;
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < m; ++j){
            cin >> a[i][j];
        }
    }
}   
 
int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    // cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
