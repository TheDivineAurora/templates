int n;
int d[505][505];
char a[505][505];

int x[] = {0,0,-1,1};
int y[] = {1,-1,0,0};

int solve1(int sx,int sy,int dx,int dy,char c){
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
            d[i][j] = INF;
        }
    }
    using tuple = pair<int,pii>;
    priority_queue<tuple,vector<tuple>, greater<tuple>> pq;
    pq.push({0, {sx, sy}});
    d[sx][sy] = 0;
    
    while(!pq.empty()){
        int val = pq.top().first;
        int i = pq.top().second.first;
        int j = pq.top().second.second;

        pq.pop();
        if(val != d[i][j]) continue;

        for(int k = 0; k < 4; ++k){
            int ni = i + x[k];
            int nj = j + y[k];

            if(ni < 0 || nj < 0 || ni >= n || nj >= n) continue;
            int next = val;
            if(a[ni][nj] != c) next++;
            if(next < d[ni][nj]){
                d[ni][nj] = next;
                pq.push({next, {ni, nj}});
            }
        }
    }

    return d[dx][dy];
}