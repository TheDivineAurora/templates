#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
 
using namespace std;
using namespace __gnu_pbds;
 
#define int long long
#define endl "\n"
#define ld long double
#define pb push_back
#define all(x) x.begin(),x.end()
#define in(v) for(int i = 0; i<v.size(); i++) cin>>v[i];
#define out(v) for(int i = 0; i<v.size(); i++) cout<<v[i]<<" "; cout<<endl;
#define popcount(num) __builtin_popcount(num)
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> pbds;
// A.order_of_key() *A.find_by_order()
const int INF = 1e18;
const int MOD = 1e9 + 7;
const int N = 2e5 + 5;
const int LN = 20;


// given a tree and all edges value = k
// in one op u can reroot the tree 
// to one of the neighbours and it will cost c
// maximize (fartherst distance from root)*k - c*no of ops to come here


vi adj[N + 5];
int dp[N + 5], d[N + 5];
int n, k, c;

void fill(int u, int p = -1){
	d[u] = 0;
	for(auto v : adj[u]) if(v != p){
		fill(v, u);
		d[u] = max(d[u], d[v] + 1);
	}
}

void reroot(int u, int p = -1){
	multiset<int> m;
	for(auto v : adj[u]){
		m.insert(d[v] + 1);
	}
	if(!m.empty())
		dp[u] = *m.rbegin();

	for(auto v : adj[u]) if(v != p){
		// just remove any depth of mine that goes thorugh current child
		int du = d[u];
		int dv = d[v];

		m.erase(m.find(d[v] + 1));

		int sf = 0;
		if(!m.empty()) sf = *m.rbegin();
		d[u] = sf;

		reroot(v, u);

		m.insert(d[v] + 1);
		d[u] = du;
	}
}
void solve(){
	cin >> n;
	for(int i = 0 ; i <= n; ++i){
		adj[i].clear();
	}

	for(int i = 0; i < n - 1; ++i){
		int x, y;
		cin >> x >> y;
		adj[x].pb(y);
		adj[y].pb(x);
	}

	fill(1, -1);
	reroot(1, -1);

	int ans = 0;
	for(int i = 1; i <= n; ++i){
		cout << dp[i] << " ";
	}

	cout << endl;
}   
 

int32_t main() {   
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0); 
    int t = 1; 
    // cin>>t;
    for(int i = 1; i<=t; i++){
        // cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}
 
